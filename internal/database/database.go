package database

import (
	"Storage/internal/model"
	"context"
	"fmt"
	"log"

	"github.com/jackc/pgx/v5"
)

type PostgresStorage struct {
	conn *pgx.Conn
}

func NewPostgresStorage(conn *pgx.Conn) *PostgresStorage {
	return &PostgresStorage{conn: conn}
}

func InitializeDB(conn *pgx.Conn) error {
	query := `create table if not exists product(
		id integer generated by default as identity primary key,
		name text not null,
		description text,
		rubles integer not null check (rubles > 0),
		pennies integer not null check (pennies >=0) default 00,
		quantity integer not null check (quantity >= 0),
		created_at timestamptz not null default now(),
		updated_at timestamptz not null default now()
	)`
	_, err := conn.Exec(context.Background(), query)
	return err
}

func (s *PostgresStorage) GetProduct(limit, offset int) ([]model.Product, error) {
	query := `select id,
		name,
		coalesce(nullif(description, ''), 'Описание отсутсвует') as description,
		rubles,
		pennies,
		quantity,
		created_at,
		updated_at
		from product
		limit $1
		offset $2`

	rows, err := s.conn.Query(context.Background(), query, limit, offset)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	defer rows.Close()

	var product []model.Product
	for rows.Next() {
		var p model.Product
		if err := rows.Scan(&p.ID, &p.Name, &p.Description, &p.Rubles, &p.Pennies, &p.Quantity, &p.CreatedAt, &p.UpdatedAt); err != nil {
			return nil, err
		}
		product = append(product, p)
	}
	return product, nil
}

func (s *PostgresStorage) GetProductById(id string) (*model.Product, error) {
	query := `select id,
		name,
		coalesce(nullif(description, ''), 'Описание отсутсвует') as description,
		rubles,
		pennies,
		quantity,
		created_at,
		updated_at
		from product
		where id = $1`
	var p model.Product
	err := s.conn.QueryRow(context.Background(), query, id).Scan(&p.ID, &p.Name, &p.Description, &p.Rubles, &p.Pennies, &p.Quantity, &p.CreatedAt, &p.UpdatedAt)
	if err != nil {
		log.Println("Get By ID: ", err)
		return nil, err
	}
	return &p, err
}

func (s *PostgresStorage) CheckIdOnExist(id string) (bool, error) {
	query := `select exists (select 1 from product where id = $1)`
	var isExist bool
	if err := s.conn.QueryRow(context.Background(), query, id).Scan(&isExist); err != nil {
		return false, fmt.Errorf("CheckID: %w", err)
	}
	return isExist, nil
}

func (s *PostgresStorage) DeleteProduct(id string) error {
	query := `delete from product where id = $1`
	_, err := s.conn.Exec(context.Background(), query, id)
	return err
}

func (s *PostgresStorage) CreateProduct(product *model.Product) error {
	query := `insert into product (name, description, rubles, pennies, quantity, created_at, updated_at) values ($1, $2, $3, $4, $5, $6, $7)`
	_, err := s.conn.Exec(context.Background(), query,
		product.Name,
		product.Description,
		product.Rubles,
		product.Pennies,
		product.Quantity,
		product.CreatedAt,
		product.UpdatedAt,
	)
	return err
}

func (s *PostgresStorage) UpdateProduct(product *model.Product) error {
	query := `update product set name = $1, description = $2, rubles = $3, pennies = $4, quantity = $5, updated_at = $6 where id = $7`
	_, err := s.conn.Exec(context.Background(), query,
		product.Name,
		product.Description,
		product.Rubles,
		product.Pennies,
		product.Quantity,
		product.UpdatedAt,
		product.ID,
	)
	return err
}
